---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/10/19 17:16
---

local eventmanager = require "Framework/EventManager"
local network = require "Framework/NetManager_InLua"
---@class Base_UI
local Base_UI = Class("Base_UI")

---@private
function Base_UI:ctor(arg_dlgname, arg_panel, arg_uitable, canvas_group,  args)
    self.dlgname = arg_dlgname                  --dlg名字
    self.panel = arg_panel                      --ui面板
    self.uitable = arg_uitable                  --收集的ui控件
    self.canvas_group = canvas_group            --canvas group 控制显隐
    --self.dialog_config = arg_dialog_config      --dialog配置文件
    self.timer_table = {}                        --定时器函数列表
    self.lua_event_register_table = {}          --lua面板注册事件
    self.net_msg_register_table = {}            --网络层注册事件
    self.isclose = false                         --关闭状态
    self:init(args)
end

---初始化
function Base_UI:init(args)
    if self.on_change_language then
        eventmanager.register_lua_event(Lua_Event.ChangeLanguage,
                function()
                    self:on_change_language()
                end)
    end

    if self.on_init then
        self:on_init(args)
    end
    self:show()
end

--释放
function Base_UI:clear_res_and_register()
    if self.panel ~= nil then
        LoadManager.DestroyGameobject(self.panel)
    end
    self.panel = nil
    self.uitable = nil
    self.canvas_group = nil
    self:clear_lua_event_register()
    self:clear_net_msg_register()
    self:remove_all_timer()
end

---打开面板
function Base_UI:show()
    self.isclose = false
    self:set_panel_visible()
    if self.on_show then
        --子类写on_show
        self:on_show()
    end
    if self:is_panel_need_release() then
        self:remove_release_timer()
    end
end

function Base_UI:set_panel_visible()
    self.canvas_group.alpha = 1
    self.canvas_group.interactable = true
    self.canvas_group.blocksRaycasts = true
end

function Base_UI:set_panel_invisible()
    self.canvas_group.alpha = 0
    self.canvas_group.interactable = false
    self.canvas_group.blocksRaycasts = false
end

--panel资源在不显示时是否需要关闭，根据配置文件
function Base_UI:is_panel_need_release()
    --ToDO:
    return true
end

function Base_UI:remove_release_timer()
    --ToDO:
end

--关闭面板
function Base_UI:re_show()
    self.isclose = false
    self:set_panel_visible()
    if self.on_re_show then
        --子类写on_re_show
        self:on_re_show()
    end
    if self:is_panel_need_release() then
        self:remove_release_timer()
    end
end

--ui栈被覆盖时调用
function Base_UI:hide()
    self:set_panel_invisible()
    if self.on_hide then
        --子类写on_hide
        self:on_hide()
    end
    if self:is_panel_need_release() then
        self:add_release_timer()
    end

end

--ui栈退栈，或者所有面板关闭时调用
function Base_UI:close()
    self:hide()
    if self:is_panel_need_release() then
        self.isclose = true
    end
end

--重新加载panel面板，继续监听事件
function Base_UI:load_panel(arg_panel, arg_uitable, canvas_group)
    self.panel_releasd = false
    Base_UI.ctor(self, self.dlgname, arg_panel, arg_uitable, canvas_group, self.dialog_config, self.args)
end

--注册lua事件
function Base_UI:register_lua_event(eventType, func)
    local register_id = eventmanager.register_lua_event(eventType, func)
    self.lua_event_register_table[eventType] = register_id
end

--移除注册事件
function Base_UI:unregister_lua_event(eventType, register_id)
    eventmanager.unregister_lua_event(eventType, register_id)
end

--添加网络协议监听
function Base_UI:register_net_msg(msgType, func)
    local register_id = network.register_net_msg(msgType, func)
    self.net_msg_register_table[msgType] = register_id
end

--移除网络协议监听
function Base_UI:unregister_net_msg(msgType, register_id)
    network.unregister_net_msg(msgType, register_id)
end

function Base_UI:get_dlg_name()
    return self.dlgname
end


return Base_UI